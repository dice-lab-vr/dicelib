import pytest

from dicelib.tcz import FileConverter, Tcz

original_streamline = [
    [49.400001525878906, 22.0, 24.5],
    [48.899383544921875, 22.048242568969727, 24.5],
    [48.39857482910156, 22.092546463012695, 24.5],
    [47.8975715637207, 22.133037567138672, 24.5],
    [47.396385192871094, 22.169836044311523, 24.5],
    [46.895015716552734, 22.203065872192383, 24.5],
    [46.39347839355469, 22.23284912109375, 24.5],
    [45.89177322387695, 22.25931167602539, 24.5],
    [45.38990783691406, 22.282573699951172, 24.5],
    [44.88788986206055, 22.30276107788086, 24.5],
    [44.385719299316406, 22.31999397277832, 24.5],
    [43.8834114074707, 22.334396362304688, 24.5],
    [43.38096618652344, 22.34609031677246, 24.5],
    [42.87839126586914, 22.355201721191406, 24.5],
    [42.375694274902344, 22.361852645874023, 24.5],
    [41.87288284301758, 22.36616325378418, 24.5],
    [41.369956970214844, 22.368261337280273, 24.5],
    [40.86692428588867, 22.368267059326172, 24.5],
    [40.36379623413086, 22.366302490234375, 24.5],
    [39.86057662963867, 22.36249351501465, 24.5],
    [39.357269287109375, 22.35696029663086, 24.5],
    [38.8538818359375, 22.349828720092773, 24.5],
    [38.35041809082031, 22.34122085571289, 24.5],
    [37.84688949584961, 22.331256866455078, 24.5],
    [37.343299865722656, 22.320064544677734, 24.5],
    [36.83965301513672, 22.307764053344727, 24.5],
    [36.33595657348633, 22.294479370117188, 24.5],
    [35.832218170166016, 22.28033447265625, 24.5],
    [35.32844543457031, 22.26544952392578, 24.5],
    [34.82463836669922, 22.249948501586914, 24.5],
    [34.320804595947266, 22.233957290649414, 24.5],
    [33.81695556640625, 22.21759605407715, 24.5],
    [33.31309509277344, 22.20098876953125, 24.5],
    [32.809226989746094, 22.18425941467285, 24.5],
    [32.30535888671875, 22.16752815246582, 24.5],
    [31.801496505737305, 22.150920867919922, 24.5],
    [31.29764747619629, 22.134559631347656, 24.5],
    [30.79381561279297, 22.118568420410156, 24.5],
    [30.290010452270508, 22.103069305419922, 24.5],
    [29.78623390197754, 22.088184356689453, 24.5],
    [29.282495498657227, 22.074037551879883, 24.5],
    [28.778799057006836, 22.060752868652344, 24.5],
    [28.27515411376953, 22.048452377319336, 24.5],
    [27.771562576293945, 22.037260055541992, 24.5],
    [27.268033981323242, 22.027297973632812, 24.5],
    [26.764572143554688, 22.018688201904297, 24.5],
    [26.261184692382812, 22.01155662536621, 24.5],
    [25.757877349853516, 22.006025314331055, 24.5],
    [25.254655838012695, 22.002214431762695, 24.5],
    [24.751527786254883, 22.00025177001953, 24.5],
    [24.248472213745117, 22.00025177001953, 24.5],
    [23.745344161987305, 22.002214431762695, 24.5],
    [23.242122650146484, 22.006025314331055, 24.5],
    [22.738815307617188, 22.01155662536621, 24.5],
    [22.235427856445312, 22.018688201904297, 24.5],
    [21.731966018676758, 22.027297973632812, 24.5],
    [21.2284374237060550, 22.037260055541992, 24.5],
    [20.72484588623047, 22.048452377319336, 24.5],
    [20.221200942993164, 22.060752868652344, 24.5],
    [19.717504501342773, 22.074037551879883, 24.5],
    [19.21376609802246, 22.088184356689453, 24.5],
    [18.709989547729492, 22.103069305419922, 24.5],
    [18.20618438720703, 22.118568420410156, 24.5],
    [17.70235252380371, 22.134559631347656, 24.5],
    [17.198503494262695, 22.150920867919922, 24.5],
    [16.69464111328125, 22.16752815246582, 24.5],
    [16.190773010253906, 22.18425941467285, 24.5],
    [15.686904907226562, 22.20098876953125, 24.5],
    [15.183043479919434, 22.21759605407715, 24.5],
    [14.679193496704102, 22.233957290649414, 24.5],
    [14.175362586975098, 22.249948501586914, 24.5],
    [13.67155647277832, 22.26544952392578, 24.5],
    [13.167780876159668, 22.28033447265625, 24.5],
    [12.664041519165039, 22.294479370117188, 24.5],
    [12.160346031188965, 22.307764053344727, 24.5],
    [11.656700134277344, 22.320064544677734, 24.5],
    [11.153109550476074, 22.331256866455078, 24.5],
    [10.649580001831055, 22.34122085571289, 24.5],
    [10.146119117736816, 22.349828720092773, 24.5],
    [9.642731666564941, 22.35696029663086, 24.5],
    [9.139424324035645, 22.36249351501465, 24.5],
    [8.636202812194824, 22.366302490234375, 24.5],
    [8.133073806762695, 22.368267059326172, 24.5],
    [7.630043983459473, 22.368261337280273, 24.5],
    [7.127119064331055, 22.36616325378418, 24.5],
    [6.624304294586182, 22.361852645874023, 24.5],
    [6.121607303619385, 22.355201721191406, 24.5],
    [5.619033336639404, 22.34609031677246, 24.5],
    [5.116588592529297, 22.334396362304688, 24.5],
    [4.614279270172119, 22.31999397277832, 24.5],
    [4.112112045288086, 22.30276107788086, 24.5],
    [3.6100926399230957, 22.282573699951172, 24.5],
    [3.108227014541626, 22.25931167602539, 24.5],
    [2.6065218448638916, 22.23284912109375, 24.5],
    [2.10498309135437, 22.203065872192383, 24.5],
    [1.603616714477539, 22.169836044311523, 24.5],
    [1.1024290323257446, 22.133037567138672, 24.5],
    [0.6014263033866882, 22.092546463012695, 24.5],
    [0.10061449557542801, 22.048242568969727, 24.5],
    [-0.40000003576278687, 22.0, 24.5],
]

compressed_streamline = [
    [49.40625, 22.0, 24.5],
    [48.90625, 22.046875, 24.5],
    [48.40625, 22.09375, 24.5],
    [47.90625, 22.140625, 24.5],
    [47.40625, 22.171875, 24.5],
    [46.90625, 22.203125, 24.5],
    [46.40625, 22.234375, 24.5],
    [45.90625, 22.265625, 24.5],
    [45.375, 22.28125, 24.5],
    [44.875, 22.296875, 24.5],
    [44.375, 22.3125, 24.5],
    [43.875, 22.328125, 24.5],
    [43.375, 22.34375, 24.5],
    [42.875, 22.359375, 24.5],
    [42.375, 22.359375, 24.5],
    [41.875, 22.359375, 24.5],
    [41.375, 22.375, 24.5],
    [40.875, 22.375, 24.5],
    [40.375, 22.359375, 24.5],
    [39.875, 22.359375, 24.5],
    [39.34375, 22.359375, 24.5],
    [38.84375, 22.34375, 24.5],
    [38.34375, 22.34375, 24.5],
    [37.84375, 22.328125, 24.5],
    [37.34375, 22.3125, 24.5],
    [36.84375, 22.3125, 24.5],
    [36.34375, 22.296875, 24.5],
    [35.84375, 22.28125, 24.5],
    [35.34375, 22.265625, 24.5],
    [34.8125, 22.25, 24.5],
    [34.3125, 22.234375, 24.5],
    [33.8125, 22.21875, 24.5],
    [33.3125, 22.203125, 24.5],
    [32.8125, 22.1875, 24.5],
    [32.3125, 22.171875, 24.5],
    [31.796875, 22.15625, 24.5],
    [31.296875, 22.140625, 24.5],
    [30.796875, 22.125, 24.5],
    [30.296875, 22.109375, 24.5],
    [29.78125, 22.09375, 24.5],
    [29.28125, 22.078125, 24.5],
    [28.78125, 22.0625, 24.5],
    [28.28125, 22.046875, 24.5],
    [27.765625, 22.03125, 24.5],
    [27.265625, 22.03125, 24.5],
    [26.765625, 22.015625, 24.5],
    [26.265625, 22.015625, 24.5],
    [25.765625, 22.0, 24.5],
    [25.25, 22.0, 24.5],
    [24.75, 22.0, 24.5],
    [24.25, 22.0, 24.5],
    [23.75, 22.0, 24.5],
    [23.234375, 22.0, 24.5],
    [22.734375, 22.015625, 24.5],
    [22.234375, 22.015625, 24.5],
    [21.734375, 22.03125, 24.5],
    [21.234375, 22.03125, 24.5],
    [20.71875, 22.046875, 24.5],
    [20.21875, 22.0625, 24.5],
    [19.71875, 22.078125, 24.5],
    [19.21875, 22.09375, 24.5],
    [18.703125, 22.109375, 24.5],
    [18.203125, 22.125, 24.5],
    [17.703125, 22.140625, 24.5],
    [17.203125, 22.15625, 24.5],
    [16.6875, 22.171875, 24.5],
    [16.1875, 22.1875, 24.5],
    [15.6875, 22.203125, 24.5],
    [15.1796875, 22.21875, 24.5],
    [14.6796875, 22.234375, 24.5],
    [14.171875, 22.25, 24.5],
    [13.671875, 22.265625, 24.5],
    [13.1640625, 22.28125, 24.5],
    [12.6640625, 22.296875, 24.5],
    [12.1640625, 22.3125, 24.5],
    [11.65625, 22.3125, 24.5],
    [11.15625, 22.328125, 24.5],
    [10.6484375, 22.34375, 24.5],
    [10.1484375, 22.34375, 24.5],
    [9.640625, 22.359375, 24.5],
    [9.140625, 22.359375, 24.5],
    [8.6328125, 22.359375, 24.5],
    [8.1328125, 22.375, 24.5],
    [7.62890625, 22.375, 24.5],
    [7.12890625, 22.359375, 24.5],
    [6.625, 22.359375, 24.5],
    [6.12109375, 22.359375, 24.5],
    [5.6171875, 22.34375, 24.5],
    [5.1171875, 22.328125, 24.5],
    [4.61328125, 22.3125, 24.5],
    [4.11328125, 22.296875, 24.5],
    [3.609375, 22.28125, 24.5],
    [3.107421875, 22.265625, 24.5],
    [2.607421875, 22.234375, 24.5],
    [2.10546875, 22.203125, 24.5],
    [1.603515625, 22.171875, 24.5],
    [1.1025390625, 22.140625, 24.5],
    [0.6015625, 22.09375, 24.5],
    [0.1005859375, 22.046875, 24.5],
    [-0.39990234375, 22.0, 24.5],
]


def test_file_from_tck_to_tcz_successfully():
    header_test = {
        'blur_core_extent': '1.1',
        'blur_gauss_extent': '2.2',
        'blur_spacing': '3.3',
        'epsilon': '0.4',
        'blur_gauss_min': '4.4',
        'representation': 'polyline',
        'timestamp': '2040-01-01T00:00:00.000Z',
    }
    # asserting original streamline
    FileConverter().from_tck_to_tcz(
        'tests/dicelib/mock/one_streamline_only.tck',
        'tests/dicelib/mock/one_streamline_converted.tcz',
        header_test
    )

    # checking newly written streamline
    tcz_in = Tcz('tests/dicelib/mock/one_streamline_converted.tcz', 'r')
    n_points, streamline = tcz_in.read_streamline()
    assert n_points == 100
    for i in range(n_points):
        for j in range(3):
            assert streamline[i][j] == compressed_streamline[i][j], \
                "Value mismatch at position " + str(i) + ", " + str(j)


def test_file_from_tck_to_tcz_spline_representation_with_epsilon_zero_will_return_all_points():
    header_test = {
        'blur_core_extent': '1.1',
        'blur_gauss_extent': '2.2',
        'blur_spacing': '3.3',
        'epsilon': '0',
        'blur_gauss_min': '4.4',
        'segment_len': '0',
        'representation': 'spline',
        'timestamp': '2040-01-01T00:00:00.000Z',
    }

    FileConverter().from_tck_to_tcz('tests/dicelib/mock/one_streamline_only.tck',
                                    'tests/dicelib/mock/one_streamline_converted_spline.tcz',
                                    header_test
                                    )

    # checking newly written streamline
    tcz_in = Tcz('tests/dicelib/mock/one_streamline_converted_spline.tcz', 'r')
    n_points, streamline = tcz_in.read_streamline()

    assert n_points == 100
    for i in range(n_points):
        for j in range(3):
            assert streamline[i][j] == pytest.approx(compressed_streamline[i][j],
                                                     abs=0.03), "Value mismatch at position " + str(i) + ", " + str(j)


segment_len_one_resampled_streamline = [
    [49.40625, 22.0, 24.5],
    [47.633548736572266, 22.160070419311523, 24.5],
    [45.85669708251953, 22.264379501342773, 24.5],
    [44.077701568603516, 22.322290420532227, 24.5],
    [42.29817581176758, 22.359254837036133, 24.5],
    [40.518218994140625, 22.359304428100586, 24.5],
    [38.73832702636719, 22.342529296875, 24.5],
    [36.95869064331055, 22.308246612548828, 24.5],
    [35.17934799194336, 22.2608585357666, 24.5],
    [33.400184631347656, 22.207181930541992, 24.5],
    [31.621089935302734, 22.151147842407227, 24.5],
    [29.842018127441406, 22.09447479248047, 24.5],
    [28.062814712524414, 22.04248809814453, 24.5],
    [26.283042907714844, 22.01595115661621, 24.5],
    [24.50313949584961, 22.001758575439453, 24.5],
    [22.723249435424805, 22.01554298400879, 24.5],
    [20.943485260009766, 22.042560577392578, 24.5],
    [19.16427993774414, 22.094507217407227, 24.5],
    [17.38517951965332, 22.150259017944336, 24.5],
    [15.606060028076172, 22.20546531677246, 24.5],
    [13.826966285705566, 22.261512756347656, 24.5],
    [12.047789573669434, 22.31440544128418, 24.5],
    [10.268033981323242, 22.342252731323242, 24.5],
    [8.488286018371582, 22.370031356811523, 24.5],
    [6.7084126472473145, 22.360937118530273, 24.5],
    [4.928898811340332, 22.322593688964844, 24.5],
    [3.1500179767608643, 22.26101303100586, 24.5],
    [1.3733099699020386, 22.15428352355957, 24.5],
    [-0.39990234375, 22.0, 24.5],
]


def test_file_from_tck_to_tcz_spline_representation_with_epsilon_greater_than_zero_and_segment_len_one():
    header_test = {
        'blur_core_extent': '1.1',
        'blur_gauss_extent': '2.2',
        'blur_spacing': '3.3',
        'epsilon': '0.005',
        'blur_gauss_min': '4.4',
        'segment_len': '1',
        'representation': 'spline',
        'timestamp': '2040-01-01T00:00:00.000Z',
    }

    FileConverter().from_tck_to_tcz('tests/dicelib/mock/one_streamline_only.tck',
                                    'tests/dicelib/mock/one_streamline_converted_with_epsilon_greater_than_zero.tcz',
                                    header_test)

    # checking newly written streamline
    tcz_in = Tcz('tests/dicelib/mock/one_streamline_converted_with_epsilon_greater_than_zero.tcz', 'r')
    n_points, streamline = tcz_in.read_streamline()

    assert n_points == 29
    for i in range(n_points):
        for j in range(3):
            assert streamline[i][j] == segment_len_one_resampled_streamline[i][j], \
                ("Value mismatch at position " + str(i) + ", " + str(j))
    tcz_in.close()


def test_file_from_tck_to_tcz_rdp_representation_with_epsilon_greater_than_zero():
    header_test = {
        'blur_core_extent': '1.1',
        'blur_gauss_extent': '2.2',
        'blur_spacing': '3.3',
        'epsilon': '0.005',
        'blur_gauss_min': '4.4',
        'representation': 'rdp',
        'timestamp': '2040-01-01T00:00:00.000Z',
    }

    FileConverter().from_tck_to_tcz('tests/dicelib/mock/one_streamline_only.tck',
                                    'tests/dicelib/mock/one_streamline_converted_rdp_with_epsilon_greater_than_zero.tcz',
                                    header_test
                                    )

    # checking newly written streamline
    tcz_in = Tcz('tests/dicelib/mock/one_streamline_converted_with_epsilon_greater_than_zero.tcz', 'r')
    n_points, streamline = tcz_in.read_streamline()

    assert n_points == 29
    for i in range(n_points):
        for j in range(3):
            assert streamline[i][j] == segment_len_one_resampled_streamline[i][j], \
                ("Value mismatch at position " + str(i) + ", " + str(j))

    tcz_in.close()


def test_file_from_tck_to_tcz_spline_representation_with_epsilon_greater_than_zero_and_segment_len_less_than_one():
    header_test = {
        'blur_core_extent': '1.1',
        'blur_gauss_extent': '2.2',
        'blur_spacing': '3.3',
        'epsilon': '0.005',
        'blur_gauss_min': '4.4',
        'segment_len': '0.1',
        'representation': 'spline',
        'timestamp': '2040-01-01T00:00:00.000Z',
    }

    FileConverter().from_tck_to_tcz('tests/dicelib/mock/one_streamline_only.tck',
                                    'tests/dicelib/mock/one_streamline_converted_with_epsilon_greater_than_zero_and_little_segment_len.tcz',
                                    header_test
                                    )

    # checking newly written streamline
    tcz_in = Tcz(
        'tests/dicelib/mock/one_streamline_converted_with_epsilon_greater_than_zero_and_little_segment_len.tcz', 'r')
    n_points, streamline = tcz_in.read_streamline()

    assert n_points == 293

    assert streamline[0][0] == 49.40625
    assert streamline[0][1] == 22.0
    assert streamline[0][2] == 24.5

    assert streamline[50][0] == 40.88396453857422
    assert streamline[50][1] == 22.361190795898438
    assert streamline[50][2] == 24.5

    assert streamline[100][0] == 32.352210998535156
    assert streamline[100][1] == 22.174179077148438
    assert streamline[100][2] == 24.5

    assert streamline[150][0] == 23.820392608642578
    assert streamline[150][1] == 22.00276756286621
    assert streamline[150][2] == 24.5

    assert streamline[200][0] == 15.28921127319336
    assert streamline[200][1] == 22.215303421020508
    assert streamline[200][2] == 24.5

    assert streamline[250][0] == 6.757236480712891
    assert streamline[250][1] == 22.361608505249023
    assert streamline[250][2] == 24.5

    assert streamline[292][0] == -0.39990234375
    assert streamline[292][1] == 22.0
    assert streamline[292][2] == 24.5


def test_file_from_tck_to_tcz_with_different_format_input_file_will_throw_exception():
    with pytest.raises(ValueError, match='input file is not a valid ".tck"'):
        FileConverter().from_tck_to_tcz('what-ever.file.ext', 'example.tcz')


def test_file_from_tck_to_tcz_with_different_format_output_file_will_throw_exception():
    with pytest.raises(ValueError, match='output file is not a valid ".tcz"'):
        FileConverter().from_tck_to_tcz('example.tck', 'what-ever.file.ext')
